# docker-compose.yml (프로젝트 루트 폴더에 위치)

version: '3.8' # Docker Compose 파일 형식 버전을 지정한다 (최신 버전 중 하나)

services: # 이 파일로 관리할 서비스(컨테이너)들의 목록을 정의한다

  # --- 백엔드 서비스 정의 ---
  backend: # 서비스 이름 (컨테이너 간 통신 시 이 이름 사용 가능)
    container_name: weather-map-backend-container # 생성될 컨테이너 이름 지정 (선택사항)
    build:
      context: ./backend # Dockerfile이 있는 경로 (현재 폴더 아래 backend 폴더)
      dockerfile: Dockerfile # 사용할 Dockerfile 이름 (기본값이라 생략 가능)
    ports:
      - "8080:8080" # 호스트포트:컨테이너포트 매핑 (이전 docker run -p 와 동일)
    environment: {}
      # 여기에 필요한 환경 변수를 설정할 수 있다 (예: 데이터베이스 정보 등)
      # 예시: SPRING_PROFILES_ACTIVE: prod
      # (주의!) API 키 같은 민감 정보는 여기에 직접 적지 않는 것이 좋다 (다른 방법 사용)
    volumes: # ★★★ 백엔드 볼륨 마운트 추가 ★★★
      # 형식: [호스트 경로]:[컨테이너 경로]:[옵션(선택)]
      # ./backend/src/main => 컨테이너 내부 /app/src/main 과 연결
      # 이렇게 하면 로컬 src/main 폴더 수정 시 컨테이너 내부도 바로 반영됨
      - ./backend/src/main:/app/src/main
      # build.gradle 변경 시에도 반영되도록 추가 (선택적)
      # - ./backend/build.gradle:/app/build.gradle
      # - ./backend/settings.gradle:/app/settings.gradle
      # (주의!) build 폴더 자체를 마운트하면 빌드 결과물이 꼬일 수 있으니 보통 소스 코드 위주로 마운트한다.

    networks: # 사용할 네트워크 지정 (아래 networks 섹션에서 정의)
      - weather_map_network

  # --- 프론트엔드 서비스 정의 ---
  frontend: # 서비스 이름
    container_name: weather-map-frontend-container # 컨테이너 이름
    build:
      context: ./frontend # Dockerfile 경로
      dockerfile: Dockerfile
    ports:
      - "8081:80" # 호스트 8081 -> 컨테이너(Nginx) 80
    volumes: # ★★★ 프론트엔드 볼륨 마운트 추가 ★★★
      # ./frontend/src => 컨테이너 내부 /app/src 와 연결
      - ./frontend/src:/app/src
      # public 폴더도 필요하다면 추가
      # - ./frontend/public:/app/public
      # 설정 파일 변경도 반영되도록 추가 (선택적)
      # - ./frontend/vite.config.js:/app/vite.config.js # 만약 Vite 사용 시
      # - ./frontend/vue.config.js:/app/vue.config.js # 만약 Vue CLI 사용 시
      # (주의!) node_modules 폴더는 마운트하지 않는다! 컨테이너 내부에서 설치된 것을 사용해야 함.
      #       Dockerfile에서 npm install을 하므로 괜찮다.
    depends_on: # 의존성 설정: 백엔드 서비스가 먼저 시작된 후 프론트엔드가 시작되도록 (선택사항)
      - backend
    networks:
      - weather_map_network

networks: # 컨테이너들이 사용할 네트워크 정의
  weather_map_network: # 네트워크 이름
    driver: bridge # 가장 일반적인 네트워크 드라이버 (기본값)
